[["index.html", "RTI Take Home Assignment Chapter 1 SQL Data Consolidation", " RTI Take Home Assignment Louise Lindegaard 2022-02-07 Chapter 1 SQL Data Consolidation Main objective: Select all variables from the records table and join them with all other tables to consolidate 9 tables into 1 â€“ The select statement contains 2 data cleaning steps: 1. Remove redundant columns 2. Rename variables to logical names -- The select statement contains 2 data cleaning steps: 1. Remove redundant columns 2. Rename variables to logical names SELECT r.id as id, over_50k, age, education_num, capital_gain, capital_loss, hours_week, workclass_id, w.name as workclass, education_level_id, e.name as education_level, marital_status_id, m.name as marital_status, occupation_id, o.name as occupation, relationship_id, rel.name as relationship, race_id, races.name as race, sex_id, s.name as sex, country_id, c.name as country FROM records as r -- The left join includes all observations from the records table LEFT JOIN countries as c ON r.country_id = c.id LEFT JOIN education_levels as e ON r.education_level_id = e.id LEFT JOIN marital_statuses as m ON r.marital_status_id = m.id LEFT JOIN occupations as o ON r.occupation_id = o.id LEFT JOIN races ON r.race_id = races.id LEFT JOIN relationships as rel ON r.relationship_id = rel.id LEFT JOIN sexes as s ON r.sex_id = s.id LEFT JOIN workclasses as w ON r.workclass_id = w.id; -- Per instruction, the above statement was exported to CSV "],["variable-cleaning-and-formating.html", "Chapter 2 Variable Cleaning and Formating 2.1 Import data and libraries into R 2.2 Data Cleaning 2.3 Variable binning 2.4 Check for Quasi Complete Separation 2.5 Split data into training, validation and test 2.6 Exploratory Statistics on Training Data", " Chapter 2 Variable Cleaning and Formating 2.1 Import data and libraries into R census = read.csv(&#39;exercise01_consolidated.csv&#39;) library(ggplot2) library(InformationValue) library(gmodels) library(DescTools) library(vcd) library(vcdExtra) library(stats) library(mgcv) library(car) library(dplyr) library(ROCR) library(caret) library(mgcv) library(xgboost) library(optbin) library(pROC) 2.2 Data Cleaning #Exploring data types for (x in 1:23) { print(colnames(census[x])) print(class(census[,x])) } # Set ordinal/ nominal variables as a factor (less than 20 levels) col_names &lt;- sapply(census, function(col) length(unique(col)) &lt; 20) census[ , col_names] &lt;- lapply(census[ , col_names] , factor) ## Check for NA Values (represented with &quot;?&quot;) in each variable sapply(census, function(x) any(x == &quot;?&quot;)) # NA values are only in categorical variables - will explore binning options below ## Data looks very clean, ready to start exploring 2.3 Variable binning ## Visualize data and explore each variable hist(census$age) # mostly normal with slight skew hist(census$capital_gain) # Zero Inflated hist(census$capital_loss) # Zero Inflated hist(census$hours_week) # Heavily inflated at 40 hours table(census$education_level) # Lots of categories, check for quasi-complete separation later ## Explore zero inflated variables colSums(census==0)/nrow(census)*100 # 91.7 % Capital Gain = 0 and 95.3 % capital loss = 0 # Bin to binary variable: census$capital_gain_indicator = ifelse(census$capital_gain == 0, 0, 1) census$capital_loss_indicator = ifelse(census$capital_loss == 0, 0, 1) # Bin the working hours variable based on inflation at 40 hours census$hours_week_bin[census$hours_week &lt; 40] = 0 census$hours_week_bin[census$hours_week &gt; 40] = 2 census$hours_week_bin[census$hours_week == 40] = 1 # Factorize census$hours_week_bin = factor(census$hours_week_bin) ## Explore country variable table(census$country) # 90% in US, will create binary variable instead for simplicity census$country_bin = ifelse(census$country == &quot;United-States&quot;, 1, 0) # Explore only normal continuous variable for linear relationship gam.age &lt;- gam(over_50k ~ s(age), data = census, family = binomial(link = &#39;logit&#39;), method = &#39;REML&#39;) summary(gam.age) plot(gam.age) # age has non-linear relationship with logit- bin this variable using optbin optbin(census$age, numbin = 4) # Upper inclusive limits of ideal splits is 29, 41, 55, 90 census$age_bin[census$age &lt;= 29] = 0 census$age_bin[census$age &gt; 29 &amp; census$age &lt;= 41] = 1 census$age_bin[census$age &gt; 41 &amp; census$age &lt;= 55] = 2 census$age_bin[census$age &gt; 55] = 3 census$age_bin = factor(census$age_bin) # Remove redundant variables (including education number and relationship to householder) census = census[,c(&#39;id&#39;, &#39;over_50k&#39;, &#39;age_bin&#39;, &#39;capital_gain_indicator&#39;, &#39;capital_loss_indicator&#39;, &#39;hours_week_bin&#39;, &#39;workclass&#39;, &#39;education_level&#39;, &#39;marital_status&#39;, &#39;occupation&#39;, &#39;race&#39;, &#39;sex&#39;, &#39;country_bin&#39; )] 2.4 Check for Quasi Complete Separation # This loop will print out the column name for any cross table that contains zeros (separation) or &lt; 5 observations for (i in 1:13) { x = table(census[, i], census$over_50k) for (k in 1:length(x)) { if (x[k] &lt;= 5) { print(c(names(census)[i], names(census$over_50k))) break } } } # Workclass contains quasi complete separation CrossTable(census$workclass, census$over_50k) # Collapse the never worked and without pay categories with missing as this is the most similar split census = census %&gt;% mutate(workclass = as.character(workclass), workclass = if_else(workclass == &#39;Never-worked&#39; | workclass == &#39;Without-pay&#39; | workclass == &#39;?&#39;, &#39;Unknown&#39;, workclass), workclass = factor(workclass)) # Collapse education levels containing &lt;5 observations: pre-school and 1-4th grade census = census %&gt;% mutate(education_level = as.character(education_level), education_level = if_else(education_level == &#39;Preschool&#39; | education_level == &#39;1st-4th&#39;, &#39;Early-Ed&#39;, education_level), education_level = factor(education_level)) CrossTable(census$occupation, census$over_50k) # Collapse armed-forces with Protective-serv, and Priv-house-serv with Handlers-cleaners census = census %&gt;% mutate(occupation = as.character(occupation), occupation = if_else(occupation == &#39;Armed-Forces&#39;, &#39;Protective-serv&#39;, occupation), occupation = if_else(occupation == &#39;Priv-house-serv&#39;, &#39;Handlers-cleaners&#39;, occupation), occupation = factor(occupation)) CrossTable(census$occupation, census$over_50k) 2.5 Split data into training, validation and test #Split the data into a 70/20/10 training, validation, and test data split. train = census %&gt;% sample_frac(0.7) test_validation = anti_join(census, train, by = &#39;id&#39;) test = test_validation %&gt;% sample_frac(2/3) validation = anti_join(test_validation, test, by = &#39;id&#39;) 2.6 Exploratory Statistics on Training Data prop.table(table(train$over_50k)) # 24 % over 50k # Explore odds ratio for binary variables OddsRatio(table(train$over_50k, train$capital_gain_indicator)) #Those with non-zero capital gains are 6.31 times as likely to make over 50k than those without OddsRatio(table(train$over_50k, train$capital_loss_indicator)) #&#39;*Those with non-zero capital losses are 3.36 times as likely to make over 50k than those without* OddsRatio(table(train$over_50k, train$country_bin)) #Those in the US are 1.35 times as likely to make above 50k compared to those out of the US OddsRatio(table(train$over_50k, train$sex)) #Men are 3.52 times as likely to make above 50k compared to women OddsRatio(table(train$capital_gain_indicator, train$sex)) #&#39;*Men are 1.72 times as likely to have non-zero capital gains than women* #Test association for nominal variables using Chi-square test chisq.test(table(train$over_50k, train$workclass)) # p-value &lt; 2.2e-16 chisq.test(table(train$over_50k, train$marital_status)) # p-value &lt; 2.2e-16 chisq.test(table(train$over_50k, train$occupation)) # p-value &lt; 2.2e-16 chisq.test(table(train$over_50k, train$race)) # p-value &lt; 2.2e-16 chisq.test(table(train$over_50k, train$hours_week_bin)) # p-value &lt; 2.2e-16 chisq.test(table(train$over_50k, train$education_level)) # p-value &lt; 2.2e-16 "],["develop-logistic-regression-model.html", "Chapter 3 Develop Logistic Regression Model 3.1 Check for issues with multi-collinearity 3.2 Variable Selection 3.3 Create Logistic Regression 3.4 Evaluate logistic regression 3.5 Test training cut off on validation", " Chapter 3 Develop Logistic Regression Model 3.1 Check for issues with multi-collinearity VIF.model=glm(over_50k~.,data=train[,2:13],family = binomial(link = &quot;logit&quot;)) VIF.model # No VIF over 10 3.2 Variable Selection # Stepwise selection to select relevant variables full.model &lt;- glm(over_50k ~ ., data=train[,2:13], family = binomial(link = &quot;logit&quot;)) empty.model &lt;- glm(over_50k ~ 1, data=train[,2:13], family = binomial(link = &quot;logit&quot;)) step.model &lt;- step(empty.model, scope = list(lower=formula(empty.model), upper=formula(full.model)), direction = &quot;both&quot;) # Forward selection to select two-variable interactions # First: double check interactions for quasi complete separation table(train$over_50k, train$hours_week_bin, train$occupation) table(train$over_50k, train$race, train$country_bin) # Quasi complete separation!! table(train$over_50k, train$sex, train$capital_gain_indicator) # Build main model with stepwise selected variables main.model &lt;- glm(over_50k ~ marital_status + education_level + capital_gain_indicator + occupation + hours_week_bin + age_bin + capital_loss_indicator + workclass + country_bin + race, data = train, family = binomial(link = &quot;logit&quot;)) # Build model with interactions of interest int.model &lt;- glm(over_50k ~ marital_status + education_level + capital_gain_indicator + occupation + hours_week_bin + age_bin + capital_loss_indicator + workclass + country_bin + race + hours_week_bin*occupation + sex*capital_gain_indicator, data = train, family = binomial(link = &quot;logit&quot;)) # Forward selection for.model &lt;- step(main.model, scope = list(lower=formula(main.model), upper=formula(int.model)), direction = &quot;forward&quot;) # Final model: # over_50k ~ marital_status + education_level + capital_gain_indicator + # occupation + hours_week_bin + age_bin + capital_loss_indicator + # workclass + country_bin + race + occupation*hours_week_bin 3.3 Create Logistic Regression # GLM with binomial logit link logit.model &lt;- glm(over_50k ~ marital_status + education_level + capital_gain_indicator + occupation + hours_week_bin + age_bin + capital_loss_indicator + workclass + country_bin + race + occupation*hours_week_bin, data = train, family = binomial(link = &quot;logit&quot;)) summary(logit.model) ## ## Call: ## glm(formula = over_50k ~ marital_status + education_level + capital_gain_indicator + ## occupation + hours_week_bin + age_bin + capital_loss_indicator + ## workclass + country_bin + race + occupation * hours_week_bin, ## family = binomial(link = &quot;logit&quot;), data = train) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.7642 -0.5102 -0.2014 -0.0523 3.6736 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -5.82952 0.88215 -6.608 3.89e-11 *** ## marital_statusMarried-AF-spouse 2.28503 0.49994 4.571 4.86e-06 *** ## marital_statusMarried-civ-spouse 2.25801 0.05922 38.129 &lt; 2e-16 *** ## marital_statusMarried-spouse-absent 0.23459 0.20898 1.123 0.261643 ## marital_statusNever-married -0.20637 0.07690 -2.684 0.007285 ** ## marital_statusSeparated -0.09391 0.15017 -0.625 0.531747 ## marital_statusWidowed 0.21829 0.13569 1.609 0.107679 ## education_level11th -0.15752 0.20293 -0.776 0.437613 ## education_level12th 0.42236 0.24677 1.712 0.086984 . ## education_level5th-6th -0.29711 0.29555 -1.005 0.314762 ## education_level7th-8th -0.76046 0.23056 -3.298 0.000973 *** ## education_level9th -0.13344 0.23632 -0.565 0.572322 ## education_levelAssoc-acdm 1.15918 0.16706 6.939 3.96e-12 *** ## education_levelAssoc-voc 1.16919 0.15970 7.321 2.46e-13 *** ## education_levelBachelors 1.72763 0.14809 11.666 &lt; 2e-16 *** ## education_levelDoctorate 2.63045 0.20009 13.146 &lt; 2e-16 *** ## education_levelEarly-Ed -1.09380 0.46590 -2.348 0.018889 * ## education_levelHS-grad 0.66272 0.14407 4.600 4.23e-06 *** ## education_levelMasters 2.08334 0.15725 13.249 &lt; 2e-16 *** ## education_levelProf-school 2.81051 0.18924 14.851 &lt; 2e-16 *** ## education_levelSome-college 1.01932 0.14635 6.965 3.28e-12 *** ## capital_gain_indicator 1.69128 0.05421 31.198 &lt; 2e-16 *** ## occupationAdm-clerical -0.08200 0.84369 -0.097 0.922570 ## occupationCraft-repair -0.56385 0.85868 -0.657 0.511403 ## occupationExec-managerial 0.37060 0.84676 0.438 0.661624 ## occupationFarming-fishing -1.46395 0.95449 -1.534 0.125091 ## occupationHandlers-cleaners -1.44022 0.93357 -1.543 0.122905 ## occupationMachine-op-inspct -1.21092 0.92996 -1.302 0.192871 ## occupationOther-service -0.71861 0.85416 -0.841 0.400172 ## occupationProf-specialty 0.47893 0.84154 0.569 0.569285 ## occupationProtective-serv -0.37979 0.91606 -0.415 0.678439 ## occupationSales -0.11771 0.84840 -0.139 0.889657 ## occupationTech-support 0.71500 0.86329 0.828 0.407541 ## occupationTransport-moving -0.45214 0.86585 -0.522 0.601539 ## hours_week_bin1 0.72102 0.20781 3.470 0.000521 *** ## hours_week_bin2 1.14874 0.25349 4.532 5.85e-06 *** ## age_bin1 1.08027 0.06054 17.843 &lt; 2e-16 *** ## age_bin2 1.48892 0.06230 23.898 &lt; 2e-16 *** ## age_bin3 1.27168 0.07274 17.482 &lt; 2e-16 *** ## capital_loss_indicator 1.11411 0.06864 16.232 &lt; 2e-16 *** ## workclassLocal-gov -0.61691 0.10624 -5.807 6.37e-09 *** ## workclassPrivate -0.42808 0.08905 -4.807 1.53e-06 *** ## workclassSelf-emp-inc -0.20601 0.11614 -1.774 0.076097 . ## workclassSelf-emp-not-inc -0.81048 0.10535 -7.693 1.44e-14 *** ## workclassState-gov -0.80148 0.11805 -6.789 1.13e-11 *** ## workclassUnknown -1.20353 0.82824 -1.453 0.146194 ## country_bin 0.22983 0.06798 3.381 0.000723 *** ## raceAsian-Pac-Islander 0.50092 0.23209 2.158 0.030903 * ## raceBlack 0.35003 0.21678 1.615 0.106389 ## raceOther 0.54349 0.30902 1.759 0.078616 . ## raceWhite 0.51540 0.20723 2.487 0.012880 * ## occupationAdm-clerical:hours_week_bin1 -0.30764 0.25747 -1.195 0.232140 ## occupationCraft-repair:hours_week_bin1 0.31446 0.28987 1.085 0.278002 ## occupationExec-managerial:hours_week_bin1 0.02512 0.25447 0.099 0.921351 ## occupationFarming-fishing:hours_week_bin1 0.30874 0.55580 0.555 0.578557 ## occupationHandlers-cleaners:hours_week_bin1 0.40715 0.48792 0.834 0.404027 ## occupationMachine-op-inspct:hours_week_bin1 0.43593 0.46577 0.936 0.349312 ## occupationOther-service:hours_week_bin1 -0.55268 0.30365 -1.820 0.068740 . ## occupationProf-specialty:hours_week_bin1 -0.10484 0.23580 -0.445 0.656594 ## occupationProtective-serv:hours_week_bin1 0.74836 0.44788 1.671 0.094742 . ## occupationSales:hours_week_bin1 0.10647 0.26443 0.403 0.687223 ## occupationTech-support:hours_week_bin1 -0.53574 0.31938 -1.677 0.093456 . ## occupationTransport-moving:hours_week_bin1 -0.09334 0.35352 -0.264 0.791749 ## occupationAdm-clerical:hours_week_bin2 -0.19940 0.31061 -0.642 0.520900 ## occupationCraft-repair:hours_week_bin2 0.21845 0.32675 0.669 0.503777 ## occupationExec-managerial:hours_week_bin2 0.18108 0.29155 0.621 0.534546 ## occupationFarming-fishing:hours_week_bin2 0.16571 0.54350 0.305 0.760440 ## occupationHandlers-cleaners:hours_week_bin2 0.17814 0.53979 0.330 0.741391 ## occupationMachine-op-inspct:hours_week_bin2 0.66040 0.49708 1.329 0.183991 ## occupationOther-service:hours_week_bin2 -0.12626 0.35249 -0.358 0.720190 ## occupationProf-specialty:hours_week_bin2 -0.41990 0.27711 -1.515 0.129704 ## occupationProtective-serv:hours_week_bin2 0.65702 0.48316 1.360 0.173883 ## occupationSales:hours_week_bin2 0.09690 0.29793 0.325 0.745002 ## occupationTech-support:hours_week_bin2 -0.49473 0.37234 -1.329 0.183951 ## occupationTransport-moving:hours_week_bin2 0.17884 0.37813 0.473 0.636242 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 37570 on 34188 degrees of freedom ## Residual deviance: 22478 on 34114 degrees of freedom ## AIC: 22628 ## ## Number of Fisher Scoring iterations: 7 3.4 Evaluate logistic regression View Coefficient of Discrimination (R2) # Get coefficient of discrimination (R2) train$p_hat = predict(logit.model, type = &#39;response&#39;) p1 = train$p_hat[train$over_50k == 1] p0 = train$p_hat[train$over_50k == 0] coef_discrim = mean(p1) - mean(p0) print(coef_discrim) ## [1] 0.4234925 # Coeff of discrimination = 0.422 # Get proportions of non-buy and buy prop0 = 26037/34189 prop1 = 8152/34189 # Plot probabilities as density plot ggplot(train, aes(p_hat, fill = over_50k)) + geom_density(alpha = 0.7) + labs(x = &quot;Predicted Probability&quot;, y = &quot;Density&quot;, fill = &quot;Outcome&quot;, title = paste(&quot;Coefficient of Discrimination = &quot;, round(coef_discrim, 3), sep = &quot;&quot;))+ scale_fill_manual( values = c(&quot;royalblue&quot;,&quot;skyblue&quot;), labels=c(&quot;Not Over 50k&quot;, &quot;Over 50k&quot;))+ theme_classic() Determine optimal cut-off # Iterate through cut-off values to determine optimal cut-off train$p_hat &lt;- predict(logit.model, type = &quot;response&quot;) youden &lt;- NULL cutoff &lt;- NULL for(i in 1:49){ cutoff = c(cutoff, i/50) youden &lt;- c(youden, youdensIndex(train$over_50k, train$p_hat, threshold = i/50)) } # Print table with lowest Youdens at the top of the list ctable &lt;- data.frame(cutoff, youden) print(ctable[order(-youden),]) ## cutoff youden ## 10 0.20 0.635996938 ## 11 0.22 0.635635499 ## 9 0.18 0.631206109 ## 12 0.24 0.630269036 ## 13 0.26 0.627567426 ## 8 0.16 0.626687279 ## 14 0.28 0.625482319 ## 15 0.30 0.621100428 ## 7 0.14 0.619808819 ## 16 0.32 0.614074583 ## 17 0.34 0.609072371 ## 6 0.12 0.606561881 ## 18 0.36 0.596573180 ## 19 0.38 0.587543163 ## 5 0.10 0.584647302 ## 20 0.40 0.579963880 ## 21 0.42 0.567165446 ## 4 0.08 0.559873707 ## 22 0.44 0.553060928 ## 23 0.46 0.538960446 ## 24 0.48 0.529059947 ## 3 0.06 0.519343852 ## 25 0.50 0.515248761 ## 26 0.52 0.500255742 ## 27 0.54 0.486395475 ## 28 0.56 0.476655984 ## 29 0.58 0.463313841 ## 2 0.04 0.451257711 ## 30 0.60 0.446401766 ## 31 0.62 0.431941574 ## 32 0.64 0.415699623 ## 33 0.66 0.395589436 ## 34 0.68 0.369763091 ## 35 0.70 0.347738822 ## 1 0.02 0.337621485 ## 36 0.72 0.330369812 ## 37 0.74 0.309015666 ## 38 0.76 0.282047561 ## 39 0.78 0.254472179 ## 40 0.80 0.234741161 ## 41 0.82 0.208197991 ## 42 0.84 0.188448955 ## 43 0.86 0.161060671 ## 44 0.88 0.137412336 ## 45 0.90 0.112772582 ## 46 0.92 0.088279133 ## 47 0.94 0.064213934 ## 48 0.96 0.032831505 ## 49 0.98 0.007233051 # Confusion matrix for train using Youden&#39;s Index optimal cut off train$classification = ifelse(train$p_hat &gt;= 0.2, 1, 0) confusionMatrix(train$over_50k, factor(train$classification)) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 19837 6195 ## 1 1028 7129 ## ## Accuracy : 0.7887 ## 95% CI : (0.7844, 0.7931) ## No Information Rate : 0.6103 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.5224 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9507 ## Specificity : 0.5350 ## Pos Pred Value : 0.7620 ## Neg Pred Value : 0.8740 ## Prevalence : 0.6103 ## Detection Rate : 0.5802 ## Detection Prevalence : 0.7614 ## Balanced Accuracy : 0.7429 ## ## &#39;Positive&#39; Class : 0 ## AUROC # Evaluate model using AUROC train$p_hat &lt;- predict(logit.model, type = &quot;response&quot;) plotROC(train$over_50k, train$p_hat) # 0.902 AUROC 3.5 Test training cut off on validation # Make predictions on validation set validation$p_hat = predict(logit.model, newdata = validation, type = &#39;response&#39;) # Confusion Matrix using Youdens cutoff validation$classification = ifelse(validation$p_hat &gt;= 0.2, 1, 0) confusionMatrix(validation$over_50k, factor(validation$classification)) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 0 1 ## 0 2822 854 ## 1 168 1040 ## ## Accuracy : 0.7907 ## 95% CI : (0.7791, 0.8021) ## No Information Rate : 0.6122 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.528 ## ## Mcnemar&#39;s Test P-Value : &lt; 2.2e-16 ## ## Sensitivity : 0.9438 ## Specificity : 0.5491 ## Pos Pred Value : 0.7677 ## Neg Pred Value : 0.8609 ## Prevalence : 0.6122 ## Detection Rate : 0.5778 ## Detection Prevalence : 0.7527 ## Balanced Accuracy : 0.7465 ## ## &#39;Positive&#39; Class : 0 ## # Get concordance Concordance(validation$over_50k, validation$p_hat) ## $Concordance ## [1] 0.9026629 ## ## $Discordance ## [1] 0.09733712 ## ## $Tied ## [1] 4.163336e-17 ## ## $Pairs ## [1] 4440608 # Evaluate model using AUROC plotROC(validation$over_50k, validation$p_hat) # 0.899 AUROC "],["create-xgboost.html", "Chapter 4 Create XGBoost 4.1 Tuning an XGBoost nrounds parameter - 11 was lowest 4.2 Tuning through caret 4.3 Variable importance 4.4 ROC Curve and AUC", " Chapter 4 Create XGBoost #XGBoost model here # Prepare data for XGBoost function train_x &lt;- model.matrix(over_50k ~ ., data = train)[, 3:53] train_y &lt;- as.numeric(as.character(train$over_50k)) 4.1 Tuning an XGBoost nrounds parameter - 11 was lowest xgbcv &lt;- xgb.cv(data = train_x, label = train_y, subsample = 0.5, nrounds = 100, nfold = 10) eval &lt;- xgbcv$evaluation_log eval %&gt;% arrange(test_rmse_mean) 4.2 Tuning through caret tune_grid &lt;- expand.grid( nrounds = 11, eta = c(0.8, 0.85, 0.9, 0.95), max_depth = c(5:15), gamma = c(0), colsample_bytree = 1, min_child_weight = 1, subsample = c(0.2, 0.25, 0.3) ) Tune XGBoost, but this takes too long to render xgb.caret &lt;- train(x = train_x, y = as.factor(train_y), method = &quot;xgbTree&quot;, tuneGrid = tune_grid, trControl = trainControl(method = &#39;cv&#39;, # Using 10-fold cross-validation number = 10)) plot(xgb.caret) xgb.caret eta = .9 and subsample = .25, max tree depth = 10 4.3 Variable importance xgb &lt;- xgboost(data = train_x, label = train_y, subsample = .25, nrounds = 11, eta = 0.9, max_depth = 10) ## [1] train-rmse:0.343095 ## [2] train-rmse:0.338909 ## [3] train-rmse:0.338673 ## [4] train-rmse:0.338262 ## [5] train-rmse:0.338478 ## [6] train-rmse:0.339279 ## [7] train-rmse:0.338436 ## [8] train-rmse:0.339909 ## [9] train-rmse:0.340088 ## [10] train-rmse:0.341383 ## [11] train-rmse:0.342746 xgb.importance(feature_names = colnames(train_x), model = xgb) ## Feature Gain Cover Frequency ## 1: marital_statusMarried-civ-spouse 0.209767501 0.0490872111 0.0525143221 ## 2: capital_gain_indicator 0.074435030 0.0458998130 0.0531508593 ## 3: occupationExec-managerial 0.052149406 0.0220364774 0.0267345640 ## 4: occupationProf-specialty 0.036610079 0.0318259619 0.0200509230 ## 5: age_bin2 0.036341528 0.0268586575 0.0509229790 ## 6: education_levelBachelors 0.034486319 0.0378326120 0.0340547422 ## 7: workclassPrivate 0.033794999 0.0230224686 0.0467854870 ## 8: age_bin1 0.030494296 0.0252985718 0.0563335455 ## 9: hours_week_bin1 0.030164027 0.0192257621 0.0585614258 ## 10: hours_week_bin2 0.028289495 0.0554534706 0.0299172502 ## 11: capital_loss_indicator 0.026246599 0.0559304599 0.0381922342 ## 12: sexMale 0.025229935 0.0144270580 0.0372374284 ## 13: age_bin3 0.023740915 0.0417072161 0.0337364736 ## 14: workclassLocal-gov 0.021864577 0.0150918551 0.0254614895 ## 15: education_levelSome-college 0.021693021 0.0143993136 0.0267345640 ## 16: workclassSelf-emp-not-inc 0.019219758 0.0202619066 0.0248249523 ## 17: education_levelMasters 0.018998655 0.0374495266 0.0216422661 ## 18: marital_statusNever-married 0.018671716 0.0139095193 0.0311903246 ## 19: country_bin 0.016205474 0.0273281772 0.0267345640 ## 20: occupationSales 0.014904698 0.0269568298 0.0155951623 ## 21: education_levelHS-grad 0.013899066 0.0099218036 0.0225970719 ## 22: education_levelDoctorate 0.013812647 0.0519662202 0.0117759389 ## 23: workclassState-gov 0.013600639 0.0162283061 0.0168682368 ## 24: raceBlack 0.013521682 0.0086594361 0.0178230426 ## 25: education_levelProf-school 0.013292339 0.0453011755 0.0108211330 ## 26: occupationCraft-repair 0.013042392 0.0253593959 0.0143220878 ## 27: workclassSelf-emp-inc 0.011626254 0.0136662228 0.0190961171 ## 28: raceAsian-Pac-Islander 0.011156863 0.0277795563 0.0152768937 ## 29: occupationTech-support 0.009945371 0.0104201347 0.0085932527 ## 30: education_levelAssoc-voc 0.009555317 0.0075176497 0.0133672820 ## 31: raceWhite 0.009221933 0.0021544549 0.0105028644 ## 32: occupationAdm-clerical 0.009064291 0.0169229817 0.0111394017 ## 33: education_levelAssoc-acdm 0.008998182 0.0286310942 0.0136855506 ## 34: occupationOther-service 0.008805552 0.0044166859 0.0120942075 ## 35: marital_statusSeparated 0.007710673 0.0064964445 0.0095480586 ## 36: workclassUnknown 0.007366862 0.0039503675 0.0095480586 ## 37: marital_statusWidowed 0.005448781 0.0025844922 0.0095480586 ## 38: occupationFarming-fishing 0.005443495 0.0210142051 0.0050922979 ## 39: occupationMachine-op-inspct 0.005110801 0.0071452352 0.0054105665 ## 40: education_level7th-8th 0.004961101 0.0026506518 0.0066836410 ## 41: occupationTransport-moving 0.004897376 0.0090958759 0.0063653724 ## 42: occupationProtective-serv 0.004889728 0.0157193041 0.0050922979 ## 43: occupationHandlers-cleaners 0.004201387 0.0159626006 0.0050922979 ## 44: education_level11th 0.003864920 0.0029462357 0.0060471038 ## 45: education_level9th 0.003341819 0.0119727508 0.0054105665 ## 46: education_level12th 0.002514823 0.0018161873 0.0035009548 ## 47: marital_statusMarried-spouse-absent 0.002408900 0.0030700182 0.0054105665 ## 48: raceOther 0.002377651 0.0082966254 0.0031826862 ## 49: education_level5th-6th 0.001104791 0.0004225677 0.0019096117 ## 50: education_levelEarly-Ed 0.000963236 0.0069659641 0.0028644176 ## 51: marital_statusMarried-AF-spouse 0.000543100 0.0069424881 0.0009548059 ## Feature Gain Cover Frequency xgb.ggplot.importance(xgb.importance(feature_names = colnames(train_x), model = xgb)) 4.4 ROC Curve and AUC # get predictions # Prepare data for predict function validation_x &lt;- model.matrix(over_50k ~ ., data = validation)[, 3:53] validation_y &lt;- as.numeric(as.character(validation$over_50k)) p_hat_xgb &lt;- predict(xgb, newdata = validation_x, type = &quot;response&quot;) # create ROC object rocobj &lt;- roc(validation$over_50k, p_hat_xgb) ## Setting levels: control = 0, case = 1 ## Setting direction: controls &lt; cases rocobj$auc # to get AUC - 0.816 ## Area under the curve: 0.8272 # create ROC plot with minimal theme ggroc(rocobj, colour = &#39;steelblue&#39;, size = 2) + ggtitle(paste0(&#39;XGBoost Model ROC Curve &#39;, &#39;(AUC = &#39;, round(rocobj$auc, 4), &#39;)&#39;)) + theme_minimal()+ labs(x=&quot;1-Specificity (FPR)&quot;,y=&quot;Sensitivity (TPR)&quot;)+geom_abline(intercept = 1.00, size = 0.5, linetype=&quot;dotted&quot;, color = &quot;red&quot;)+ coord_cartesian(xlim=c(1,0)) "],["conclusion-write-up.html", "Chapter 5 Conclusion / Write Up 5.1 Figure 1 Code 5.2 Final AUROC Chart and Code", " Chapter 5 Conclusion / Write Up Overview The goal of this project is to develop a model that predicts whether individuals, based on census variables, make over $50,000/year. I compared the predictive power of a logistic regression to an XGBoost model using the area under the ROC curve (AUROC). This statistic calculates each models ability to distinguish between people who make above $50,000/year from those who do not. The logistic regression model resulted in the higher AUROC, and was able to better predict who is likely to make above $50,000/year from census data. The final AUROC on the test data was 0.894. Methodology The first two steps were exploring each variable individually and binning continuous variables into categories. Each variable was then tested for quasi-complete separation. This is a problem when a subgroup of the predictor variable perfectly predicts the target variable outcome. Each subgroup with less than 5 observations was collapsed into a new, larger group. The data was split into a 70/20/10 training/validation/test split and each variable was tested for multi-collinearity to ensure no two variables are providing the same information in the model. Stepwise selection was used to identify which variables were important in predicting the target. The 13 important variables were then used in a forward selection process to identify any predictive interactions. For example, the selection process identified changes in the target variables relationship with hours worked each week when looking at different occupations. A logistic regression was built using these variables. The XGBoost was tuned and built using all census variables, and the most important variables were calculated using a gain statistic. Results A simple relationship between marital status and people who make over 50k can be pictured in Figure 1 below. This figure shows the large majority of people who make over 50k are married to civil spouses. In our census data, 85% of people who make over 50k are married to a civil spouse compared to only 33% of those who do not make over 50k. Furthermore, the XGBoost model found marital status to be the most important variable in predicting the target. Figure 1. Marital status for those who make more than $50,000 (1) and those who do not (0) The logistic regression was able to better predict people who make over $50,000/year using census variables. I recommend using a logistic regression moving forward to best predict the individuals that make over 50K using census data. Given more time for tuning, you might be able to challenge the predictive power using a future XGBoost model. 5.1 Figure 1 Code # Add color blind palette cbPalette = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;, &quot;#F0E442&quot;, &quot;#D55E00&quot;, &quot;#CC79A7&quot;) # Plot data ggplot(data = train) + geom_bar(mapping = aes(x = over_50k, fill = marital_status, color =)) + scale_fill_manual(values=cbPalette) + #scale_fill_discrete(labels = c(&quot;Divorced&quot;, &quot;Married- Armed Forces&quot;, &quot;Married- Civil Spouse&quot;, &quot;Married- Spouse Absent&quot;, &quot;Never Married&quot;, &quot;Separated&quot;, &quot;Widowed&quot;)) + labs(title=&quot;Marital Status over Earning Category&quot;, x =&quot;Earning Over 50k (0: No, 1: Yes)&quot;, y = &quot;Frequency&quot;, fill = &quot;Marital Status&quot;) + theme_minimal() 5.2 Final AUROC Chart and Code # Make predictions on validation set test$p_hat = predict(logit.model, newdata = test, type = &#39;response&#39;) # Evaluate model using AUROC plotROC(test$over_50k, test$p_hat) # 0.894 AUROC This repo was initially generated from a bookdown template available here: https://github.com/jtr13/bookdown-template. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
